cmake_minimum_required(VERSION 3.24)

project(fseq_convert VERSION 0.0.1 LANGUAGES CXX)

include(FetchContent)

FetchContent_Declare(
        spdlog
        GIT_REPOSITORY https://github.com/gabime/spdlog.git
        GIT_TAG        v1.11.0
)
FetchContent_MakeAvailable(spdlog)

FetchContent_Declare(
    argparse
    GIT_REPOSITORY https://github.com/p-ranav/argparse.git
)
FetchContent_MakeAvailable(argparse)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Get the Git commit hash
execute_process(
    COMMAND git rev-parse --short HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_COMMIT_HASH
    ERROR_QUIET
)

# Remove newline character from the output
string(STRIP "${GIT_COMMIT_HASH}" OUT_STRIP_GIT_COMMIT_HASH)

# Write the Git hash to a header file
file(WRITE "${CMAKE_BINARY_DIR}/git_version.h"
"// This file is auto-generated by CMake during the build process\n"
"#pragma once\n\n"
"#define GIT_COMMIT_HASH \"${OUT_STRIP_GIT_COMMIT_HASH}\"\n"
"\n"
)

IF (WIN32)
    include_directories(../include ../include/zlib ../xLights ${CMAKE_CURRENT_BINARY_DIR})
    link_directories(../lib/windows64)
ELSE()
    include_directories(../xLights ${CMAKE_CURRENT_BINARY_DIR})
ENDIF()

set(SRC_FILES
    fseq_convert.cpp
    ../xLights/FSEQFile.cpp
    ../xLights/FSEQFile.h
    )

add_executable(${PROJECT_NAME} ${SRC_FILES})

IF (WIN32)
    target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog argparse libzstdd_static_VS.lib z.lib)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
ELSE()
    find_package(ZLIB REQUIRED)
    find_package(zstd REQUIRED)
    target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog argparse zstd::libzstd_shared ZLIB::ZLIB)
ENDIF()
